/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Physician;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.Enterprise.Enterprise;
import model.Network.Network;
import model.Organization.Physicians;
import model.Users.Users;
import model.WorkQueue.PhysicianWorkRequest;
import model.WorkQueue.WorkRequest;

/**
 *
 * @author Admin
 */
public class PhysicianJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PhysicianJPanel
     */
   JPanel userProcessContainer;
    Users account;
    Physicians organization;
    Enterprise enterprise;
    EcoSystem ecosystem;
    Network network;
    
    public PhysicianJPanel(JPanel userProcessContainer, Users account, Physicians organization, Enterprise enterprise, EcoSystem ecosystem, Network network) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.organization=organization;
        this.enterprise=enterprise;
        this.ecosystem=ecosystem;
        this.network=network;
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tblPatientData.getModel();
        model.setRowCount(0);
        for (WorkRequest workRequest:organization.getWorkQueue().getWorkRequestList()) {
                Object[] row = new Object[6];
                row[0] = ((PhysicianWorkRequest)workRequest).getPatient().getPatientId();
                row[1] = ((PhysicianWorkRequest)workRequest).getPatient().getPatientName();
                row[2] = workRequest.getSender();
                row[3] = workRequest.getRequestDate();
                row[4] = workRequest.getReceiver();
                row[5] = workRequest.getStatus();
                model.addRow(row);   
        }                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientData = new javax.swing.JTable();
        btnAssignTherapist = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        tblPatientData.setForeground(new java.awt.Color(102, 0, 0));
        tblPatientData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Doctor name", "Request Date", "Therapist", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPatientData.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tblPatientData.setSelectionForeground(new java.awt.Color(255, 255, 0));
        jScrollPane1.setViewportView(tblPatientData);

        btnAssignTherapist.setBackground(new java.awt.Color(0, 183, 210));
        btnAssignTherapist.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAssignTherapist.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignTherapist.setText("Assign me");
        btnAssignTherapist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignTherapistActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 183, 210));
        lblTitle.setText("Therapist Dashboard");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Therapy/Therapy.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(384, 384, 384)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAssignTherapist, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(425, 425, 425))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAssignTherapist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignTherapistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignTherapistActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientData.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select the request to assign");
            return;
        }

        WorkRequest request = null;
        for(WorkRequest w:organization.getWorkQueue().getWorkRequestList()){
            if(Integer.parseInt(""+tblPatientData.getValueAt(tblPatientData.getSelectedRow(), 0))==((PhysicianWorkRequest)w).getPatient().getPatientId()){
                request=w;
                break;
            }
        }

        if(request.getStatus().equalsIgnoreCase("Assigned")){
            JOptionPane.showMessageDialog(null,"This patient is assigned");
        }
        request.setStatus("Assigned");
        request.setReceiver(account);
        populateTable();

    }//GEN-LAST:event_btnAssignTherapistActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignTherapist;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPatientData;
    // End of variables declaration//GEN-END:variables
}
